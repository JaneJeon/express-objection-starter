#!/usr/bin/env node
// istanbul ignore file

/**
 * Module dependencies.
 */
var app = require('../app')
var log = require('../lib/logger')
var http = require('http')
var acl = require('../lib/acl')

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT)
app.set('port', port)

/**
 * Create HTTP server.
 */
var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */
acl.initialize().then(() => server.listen(port))
server.on('error', onError)
server.on('listening', onListening)

/**
 * Graceful shutdown for pm2
 */
process.on('SIGINT', () => server.close())
process.on('SIGTERM', () => server.close())

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      log.error(bind + ' requires elevated privileges')
      process.exit(1)
    case 'EADDRINUSE':
      log.error(bind + ' is already in use')
      process.exit(1)
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  log.info('Server listening on ' + bind)
}
